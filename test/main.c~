#include "stdio.h"
#include "sys/param.h"
#include "sys/types.h"
#include <sys/mbuf.h>
#include <kern/log.h>
#include <libkern/libkern.h>

//timeout test stub
#if 0
void tm_tester()
{
	printf("\n Aha");
}

void main()
{
	init_timer();
	timeout(tm_tester, "aha", 1000);
	Sleep(3000);
}
#endif

#if 1
// a udp pkt with ethernet header 
//used for testing purpose, length = 
char audp_pkt[] = 
{
    0x00, 0x50, 0x56, 0x87, 0x60, 0x02, 0x94, 0xde, 0x80, 0x70, 0x65, 0xdf, 0x08, 0x00, 0x45, 0x00,
    0x00, 0xb4, 0x71, 0xdf, 0x00, 0x00, 0x80, 0x11, 0x00, 0x00, 0xc0, 0xa8, 0x01, 0x99, 0x68, 0xee,
    0x2b, 0x31, 0xe0, 0xec, 0xb1, 0x07, 0x00, 0xa0, 0x57, 0x12, 0x17, 0x01, 0x02, 0x03, 0x04, 0x05,
    0x06, 0x07, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15,
    0x16, 0xd8, 0xa8, 0xb8, 0xad, 0x69, 0x1d, 0xba, 0x60, 0x6c, 0xe6, 0x0e, 0xc1, 0x70, 0x0a, 0x89,
    0xd3, 0x22, 0xb3, 0x74, 0xa2, 0xa7, 0x60, 0xe6, 0x7e, 0xe5, 0x7f, 0xa9, 0xd9, 0x7f, 0x76, 0x09,
    0x35, 0x70, 0xec, 0x55, 0xaa, 0xd2, 0x6d, 0x2b, 0x7d, 0xa7, 0xc0, 0xd8, 0xc0, 0x1b, 0x66, 0x37,
    0xb5, 0x31, 0xeb, 0x35, 0xd6, 0x10, 0x3c, 0x0c, 0x3e, 0xd3, 0xf8, 0x76, 0xc2, 0xe0, 0xf5, 0xc5,
    0x92, 0xd2, 0xcc, 0xa8, 0x6c, 0x89, 0x8e, 0x4f, 0x5c, 0x90, 0xa2, 0x0e, 0x49, 0x30, 0x19, 0x71,
    0xfb, 0xe0, 0x37, 0x1a, 0x6d, 0xb2, 0x90, 0xb8, 0xff, 0x90, 0xcd, 0x1b, 0xb7, 0xce, 0x60, 0x65,
    0x66, 0x1d, 0xd4, 0x26, 0x36, 0x7a, 0x28, 0x45, 0xaa, 0x52, 0xd1, 0xe9, 0xd2, 0x09, 0xde, 0x4b,
    0x5b, 0x6f, 0x2a, 0x62, 0x23, 0x1c, 0x28, 0x66, 0x2c, 0xf0, 0xba, 0x9f, 0xc6, 0x7b, 0x9c, 0x9a,
    0xad, 0xa2
};

#define false 0
#define true 1
void mbuf_copyin(char *buf, unsigned blen)
{
	struct mbuf *m = NULL, *fm = NULL;
	struct mbuf **mp = NULL;
	int resides = blen;
	int space, len;
	int hdr = true;
	unsigned char *p = NULL;

	do {
		if (hdr) {
			MGETHDR(m, 0, 0);
			fm = m;
		    mp = &m->m_next;
			hdr = false;
			space = MHLEN;
		}
		else {
			MGET(m, 0, 0);
			*mp = m;
			mp = &m->m_next;
			space = MLEN;
		}

		len = min(resides, space);
		p = mtod(m, unsigned char*);
		bcopy(&buf[blen - resides], p, len);
		m->m_len = len;
		space -= len;
		resides -= len;
	} while (resides > 0);
	
	fm->m_pkthdr.len = blen;
	fm->m_pkthdr.rcvif = NULL;
}

void main()
{
    main1(); 
    mbuf_copyin(audp_pkt, sizeof(audp_pkt));
    wpif->ioctl(wpif, SIOCSIFADDR, inifaddr);
    return;
}
#endif
