---- in_ifaddr Matches (79 in 10 files) ----
If_ether.c (netinet):	struct in_ifaddr *ia, *maybe_ia = 0;
If_ether.c (netinet):	for (ia = in_ifaddr; ia; ia = ia->ia_next)
Igmp.c (netinet):	register struct in_ifaddr *ia;
Igmp_var.h (netinet):	   ntohl(IA_SIN(in_ifaddr)->sin_addr.s_addr) + \
In.c (netinet):	register struct in_ifaddr *ia;
In.c (netinet):	for (ia = in_ifaddr; ia; ia = ia->ia_next)
In.c (netinet):	register struct in_ifaddr *ia;
In.c (netinet):		for (ia = in_ifaddr; ia; ia = ia->ia_next)
In.c (netinet):		for (ia = in_ifaddr; ia; ia = ia->ia_next)
In.c (netinet):	register struct in_ifaddr *ia = 0;
In.c (netinet):	struct in_ifaddr *oia;
In.c (netinet):		for (ia = in_ifaddr; ia; ia = ia->ia_next)
In.c (netinet):		if (ia == (struct in_ifaddr *)0) {
In.c (netinet):			oia = (struct in_ifaddr *)
In.c (netinet):			if (oia == (struct in_ifaddr *)NULL)
In.c (netinet):			if (ia = in_ifaddr) {
In.c (netinet):				in_ifaddr = oia;
In.c (netinet):		if (ia == (struct in_ifaddr *)0)
In.c (netinet):		if (oia == (ia = in_ifaddr))
In.c (netinet):			in_ifaddr = ia->ia_next;
In.c (netinet):	register struct in_ifaddr *ia;
In.c (netinet):	register struct in_ifaddr *ia;
In.c (netinet):#define ia ((struct in_ifaddr *)ifa)
In.c (netinet):	struct in_ifaddr *ia;
In_pcb.c (netinet):	if (in_ifaddr == 0)
In_pcb.c (netinet):	struct in_ifaddr *ia = NULL;
In_pcb.c (netinet):	if (in_ifaddr) {
In_pcb.c (netinet):#define ifatoia(ifa)	((struct in_ifaddr *)(ifa))
In_pcb.c (netinet):		    sin->sin_addr = IA_SIN(in_ifaddr)->sin_addr;
In_pcb.c (netinet):		  (in_ifaddr->ia_ifp->if_flags & IFF_BROADCAST))
In_pcb.c (netinet):		    sin->sin_addr = satosin(&in_ifaddr->ia_broadaddr)->sin_addr;
In_pcb.c (netinet):		ia = (struct in_ifaddr *)0;
In_pcb.c (netinet):				ia = in_ifaddr;
In_pcb.c (netinet):				for (ia = in_ifaddr; ia; ia = ia->ia_next)
In_var.h (netinet):struct in_ifaddr {
In_var.h (netinet):	struct	in_ifaddr *ia_next;	/* next in list of internet addresses */
In_var.h (netinet): * Given a pointer to an in_ifaddr (ifaddr),
In_var.h (netinet):#define	IA_SIN(ia) (&(((struct in_ifaddr *)(ia))->ia_addr))
In_var.h (netinet):	((ntohl((in).s_addr) & ~((struct in_ifaddr *)(ifa)->ia_subnetmask))
In_var.h (netinet):extern	struct	in_ifaddr *in_ifaddr;
In_var.h (netinet):	register struct in_ifaddr *ia; \
In_var.h (netinet):	for (ia = in_ifaddr; \
In_var.h (netinet): * Macro for finding the internet address structure (in_ifaddr) corresponding
In_var.h (netinet):	/* struct in_ifaddr *ia; */ \
In_var.h (netinet):	for ((ia) = in_ifaddr; \
In_var.h (netinet): * They are kept in a linked list, rooted in the interface's in_ifaddr
In_var.h (netinet):	struct	in_ifaddr *inm_ia;	/* back pointer to in_ifaddr */
In_var.h (netinet):	struct in_ifaddr *i_ia;
In_var.h (netinet):	register struct in_ifaddr *ia; \
In_var.h (netinet):	(step).i_ia = in_ifaddr; \
In_var.h (netinet):	    struct in_ifaddr *, struct sockaddr_in *, int));
In_var.h (netinet):void	in_ifscrub __P((struct ifnet *, struct in_ifaddr *));
Ip_icmp.c (netinet):	struct in_ifaddr *ia;
Ip_icmp.c (netinet):		ia = (struct in_ifaddr *)ifaof_ifpforaddr(
Ip_icmp.c (netinet):	register struct in_ifaddr *ia;
Ip_icmp.c (netinet):	for (ia = in_ifaddr; ia; ia = ia->ia_next) {
Ip_icmp.c (netinet):	if (ia == (struct in_ifaddr *)0)
Ip_icmp.c (netinet):		ia = (struct in_ifaddr *)ifaof_ifpforaddr(
Ip_icmp.c (netinet):	if (ia == (struct in_ifaddr *)0)
Ip_icmp.c (netinet):		ia = in_ifaddr;
Ip_input.c (netinet):struct	in_ifaddr *in_ifaddr;			/* first inet address */
Ip_input.c (netinet):	register struct in_ifaddr *ia;
Ip_input.c (netinet):	if (in_ifaddr == NULL)
Ip_input.c (netinet):	for (ia = in_ifaddr; ia; ia = ia->ia_next) {
Ip_input.c (netinet):	register struct in_ifaddr *ia;
Ip_input.c (netinet):			ia = (struct in_ifaddr *)
Ip_input.c (netinet):#define	INA	struct in_ifaddr *
Ip_input.c (netinet):struct in_ifaddr *
Ip_input.c (netinet):		return ((struct in_ifaddr *)0);
Ip_input.c (netinet):	return ((struct in_ifaddr *) ipforward_rt.ro_rt->rt_ifa);
Ip_input.c (netinet):#define	RTA(rt)	((struct in_ifaddr *)(rt->rt_ifa))
Ip_output.c (netinet):	struct in_ifaddr *ia;
Ip_output.c (netinet):#define ifatoia(ifa)	((struct in_ifaddr *)(ifa))
Ip_output.c (netinet):			register struct in_ifaddr *ia;
Ip_output.c (netinet):			for (ia = in_ifaddr; ia; ia = ia->ia_next)
Ip_output.c (netinet):	struct in_ifaddr *ia;
Ip_var.h (netinet):struct in_ifaddr *
